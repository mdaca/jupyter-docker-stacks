name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push docker-stacks-foundation Docker Image
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REPOSITORY: mdaca/jupyter/jupyter-docker-stacks-foundation
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          IMAGE_TAG=5.1.0
          # Set ENV for Docker build
          ECR_REPOSITORY=mdaca/jupyter/jupyter-docker-stacks-foundation
          REPOSITORY=$ECR_REPOSITORY
          REGISTRY=201959883603.dkr.ecr.us-east-2.amazonaws.com
          # Build the Docker image
          docker build -f images/docker-stacks-foundation/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG images/docker-stacks-foundation

          # Push the Docker image
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Add latest tag
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

          # push latest Docker Image
          docker push $REGISTRY/$REPOSITORY:latest
      - name: Build and Push Jupyter-base-notebook Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-base-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          IMAGE_TAG=5.1.0
          # Set ENV for Docker build
          ECR_REPOSITORY=mdaca/jupyter/jupyter-base-notebook
          REPOSITORY=$ECR_REPOSITORY
          REGISTRY=201959883603.dkr.ecr.us-east-2.amazonaws.com
          docker build -f images/base-notebook/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG images/base-notebook
          # Push the Docker image
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          #Add latest tag
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest
          #push latest Docker Image
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Build and Push Jupyter-minimal-notebook Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-minimal-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
 
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          IMAGE_TAG=5.1.0
 
          # Set ENV for Docker build
          ECR_REPOSITORY=mdaca/jupyter/jupyter-minimal-notebook
          REPOSITORY=$ECR_REPOSITORY
          REGISTRY=201959883603.dkr.ecr.us-east-2.amazonaws.com

          # Build the Docker image
          docker build -f images/minimal-notebook/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG images/minimal-notebook

          # Push the Docker image
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Add latest tag
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

          # push latest Docker Image
          docker push $REGISTRY/$REPOSITORY:latest
      - name: Build and Push jupyter-scipy-notebook Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-scipy-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION

          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          IMAGE_TAG=5.1.0

          # Set ENV for Docker build
          ECR_REPOSITORY=mdaca/jupyter/jupyter-scipy-notebook
          REPOSITORY=$ECR_REPOSITORY
          REGISTRY=201959883603.dkr.ecr.us-east-2.amazonaws.com

          # Build the Docker image
          docker build -f images/scipy-notebook/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG images/scipy-notebook

          # Push the Docker image
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Add latest tag
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

          # push latest Docker Image
          docker push $REGISTRY/$REPOSITORY:latest

      - name: Build and Push Jupyter DataScience-notbook Docker Image
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-datascience-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION

          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          IMAGE_TAG=5.1.0

          # Set ENV for Docker build
          ECR_REPOSITORY=mdaca/jupyter/jupyter-datascience-notebook
          REPOSITORY=$ECR_REPOSITORY
          REGISTRY=201959883603.dkr.ecr.us-east-2.amazonaws.com

          # Build the Docker image
          docker build -f images/datascience-notebook/Dockerfile -t $REGISTRY/$REPOSITORY:$IMAGE_TAG images/datascience-notebook

          # Push the Docker image
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

          # Add latest tag
          docker tag $REGISTRY/$REPOSITORY:$IMAGE_TAG $REGISTRY/$REPOSITORY:latest

          # push latest Docker Image
          docker push $REGISTRY/$REPOSITORY:latest
  security:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Download Jupyter Docker-Stacks-Foundation Docker Image from ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-docker-stacks-foundation
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          # Download docker image for scanning purposes
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker images
      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
      - name: Scan Jupyter Docker-Stacks-Foundation Docker Image with Trivy
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-docker-stacks-foundation
        run: |
          trivy image --severity HIGH,CRITICAL $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          trivy image --format json $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG > Jupyter-Docker-Stacks-Foundation.json
          jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | [.SeveritySource, .VulnerabilityID, .PkgName, .PkgPath, .InstalledVersion, .FixedVersion, .Status, .Severity] | @csv' Jupyter-Docker-Stacks-Foundation.json > Jupyter-Docker-Stacks-Foundation-Trivy.csv
      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin
      - name: Generate Jupyter Docker-Stacks-Foundation SBOM with Syft
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-docker-stacks-foundation
        run: |
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG  > Jupyter-Docker-Stacks-Foundation-sbom.tf
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
           name: trivy-and-sbom-reports
           path: |
             Jupyter-Docker-Stacks-Foundation-Trivy.csv
             Jupyter-Docker-Stacks-Foundation-sbom.tf
      - name: Download Jupyter-base-notebook Docker Image from ECR       
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-base-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          # Download docker image for scanning purposes
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker images
      - name: Scan Jupyter-base-notebook Docker Image with Trivy
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-base-notebook
        run: |
          trivy image --severity HIGH,CRITICAL $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          trivy image --format json $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG > Jupyter-base-notebook.json
          jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | [.SeveritySource, .VulnerabilityID, .PkgName, .PkgPath, .InstalledVersion, .FixedVersion, .Status, .Severity] | @csv' Jupyter-base-notebook.json > Jupyter-base-notebook-Trivy.csv
      - name: Generate Jupyter-base-notebook SBOM with Syft
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-base-notebook
        run: |
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG  > Jupyter-base-notebook-sbom.tf
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-and-sbom-reports
          path: |
            Jupyter-hub-Trivy.csv
            Jupyter-hub-sbom.tf
      - name: Scan Jupyter-minimal-notebook Docker Image with Trivy
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-minimal-notebook
        run: |
          trivy image --severity HIGH,CRITICAL $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          trivy image --format json $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG > Jupyter-minimal-notebook.json
          jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | [.SeveritySource, .VulnerabilityID, .PkgName, .PkgPath, .InstalledVersion, .FixedVersion, .Status, .Severity] | @csv' Jupyter-minimal-notebook.json > Jupyter-minimal-notebook-Trivy.csv
      - name: Generate Jupyter-minimal-notebook SBOM with Syft
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-minimal-notebook
        run: |
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG  > Jupyter-minimal-notebook-sbom.tf
      
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-and-sbom-reports
          path: |
            Jupyter-minimal-notebook-Trivy.csv
            Jupyter-minimal-notebook-sbom.tf

      - name: Download Jupyter-scipy-notebook Docker Image from ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-scipy-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          # Download docker image for scanning purposes
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker images
 
      - name: Scan Jupyter-scipy-notebook Docker Image with Trivy
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-scipy-notebook
        run: |
          trivy image --severity HIGH,CRITICAL $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          trivy image --format json $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG > jupyter-scipy-notebook.json
          jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | [.SeveritySource, .VulnerabilityID, .PkgName, .PkgPath, .InstalledVersion, .FixedVersion, .Status, .Severity] | @csv' jupyter-scipy-notebook.json > jupyter-scipy-notebook-Trivy.csv

      - name: Scan and Generate Jupyter-scipy-notebook SBOM with Syft
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-scipy-notebook
        run: |
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG  > jupyter-scipy-notebook-sbom.tf
      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-and-sbom-reports
          path: |
            jupyter-scipy-notebook-Trivy.csv
            jupyter-scipy-notebook-sbom.tf

      - name: Download Jupyter-datascience-notebook Docker Image from ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-datascience-notebook
        run: |
          # Set ENV for AW Cred
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
     
          # Get token from ECR and Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

          # Download docker image for scanning purposes
          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          docker images

      - name: Scan Jupyter-datascience-notebook Docker Image with Trivy
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-datascience-notebook
        run: |
          trivy image --severity HIGH,CRITICAL $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          trivy image --format json $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG > Jupyter-datascience-notebook.json
          jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | [.SeveritySource, .VulnerabilityID, .PkgName, .PkgPath, .InstalledVersion, .FixedVersion, .Status, .Severity] | @csv' Jupyter-datascience-notebook.json > Jupyter-datascience-notebook-Trivy.csv

      - name: Scan and Generate Jupyter-datascience-notebook SBOM with Syft
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          ECR_REPOSITORY: mdaca/jupyter/jupyter-datascience-notebook
        run: |
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG
          syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG  > Jupyter-datascience-notebook-sbom.tf

      - name: Upload Reports
        uses: actions/upload-artifact@v4
        with:
          name: trivy-and-sbom-reports
          path: |
            Jupyter-datascience-notebook-Trivy.csv
            Jupyter-datascience-notebook-sbom.tf 
