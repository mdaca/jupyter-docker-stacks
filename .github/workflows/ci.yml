###################################################################################
#        #######      ##     ##       ##########      ##         ########         #
#        ##    ##     ##     ##           ##          ##         ##     ##        #
#        ##   ##      ##     ##           ##          ##         ##      ##       #
#        ## ##        ##     ##           ##          ##         ##       ##      #
#        ##   ##      ##     ##           ##          ##         ##      ##       #
#        ##    ##     ##     ##           ##          ##         ##     ##        #
#        #######      #########       ##########      #######    #########        #
###################################################################################        
name: Build and Push Docker Images to ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and Push Docker Images
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-2
          IMAGE_TAG: 5.1.0
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          # Configure AWS credentials
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
       
          # Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
          
          # Build and push Docker-stacks-foundation
          docker build -f images/docker-stacks-foundation/Dockerfile -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-docker-stacks-foundation:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-docker-stacks-foundation:$IMAGE_TAG

          # Build and push Jupyter-base-notebook
          docker build -f images/base-notebook/Dockerfile -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-base-notebook:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-base-notebook:$IMAGE_TAG

          # Build and push Jupyter-minimal-notebook
          docker build -f images/minimal-notebook/Dockerfile -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-minimal-notebook:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-minimal-notebook:$IMAGE_TAG

          # Build and push Jupyter-scipy-notebook
          docker build -f images/scipy-notebook/Dockerfile -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-scipy-notebook:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-scipy-notebook:$IMAGE_TAG

          # Build and push Jupyter-datascience-notebook
          docker build -f images/datascience-notebook/Dockerfile -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-datascience-notebook:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/mdaca/jupyter/jupyter-datascience-notebook:$IMAGE_TAG
          
######################################################################################
#   ###########      ########     ########       ##         ##       ##      ##      #
#       ##           ##    ##        ##           ##       ##         ##    ##       #
#       ##           ##   ##         ##            ##     ##           ##  ##        #
#       ##           ##  ##          ##             ##   ##             ####         #
#       ##           ##   ##         ##               ###                ##          #
#       ##           ##    ##     ########             #                 ##          #
######################################################################################
          
  security:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Docker Images from ECR
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          REPOSITORIES:
            - mdaca/jupyter/jupyter-docker-stacks-foundation
            - mdaca/jupyter/jupyter-base-notebook
            - mdaca/jupyter/jupyter-minimal-notebook
            - mdaca/jupyter/jupyter-scipy-notebook
            - mdaca/jupyter/jupyter-datascience-notebook
        run: |
          # Configure AWS credentials
          aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
          aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
          aws configure set default.region $AWS_REGION
       
          # Docker login
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          # Download Docker images for scanning
          for REPO in ${REPOSITORIES[@]}; do
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:$IMAGE_TAG
          done
          docker images

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
          
      - name: Scan Docker Images with Trivy
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          REPOSITORIES:
            - mdaca/jupyter/jupyter-docker-stacks-foundation
            - mdaca/jupyter/jupyter-base-notebook
            - mdaca/jupyter/jupyter-minimal-notebook
            - mdaca/jupyter/jupyter-scipy-notebook
            - mdaca/jupyter/jupyter-datascience-notebook
        run: |
          for REPO in ${REPOSITORIES[@]}; do
            trivy image --exit-code 1 --severity HIGH,CRITICAL $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:$IMAGE_TAG
          done

      - name: Install Syft
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sudo sh -s -- -b /usr/local/bin

      - name: Generate and Upload SBOMs
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          IMAGE_TAG: 5.1.0
          REPOSITORIES:
            - mdaca/jupyter/jupyter-docker-stacks-foundation
            - mdaca/jupyter/jupyter-base-notebook
            - mdaca/jupyter/jupyter-minimal-notebook
            - mdaca/jupyter/jupyter-scipy-notebook
            - mdaca/jupyter/jupyter-datascience-notebook
        run: |
          for REPO in ${REPOSITORIES[@]}; do
            syft $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$REPO:$IMAGE_TAG > ${REPO//\//-}-sbom.tf
            mv ${REPO//\//-}-sbom.tf sbom/
          done
          
      - name: Upload SBOMs
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom/
